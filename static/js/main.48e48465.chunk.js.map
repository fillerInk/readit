{"version":3,"sources":["components/App.js","components/List.js","serviceWorker.js","index.js"],"names":["App","useState","className","Card","title","upvotes","selftext","link","target","href","List","subreddit","selectSub","posts","setPosts","useEffect","url","axios","get","then","res","newPosts","data","children","map","obj","loadingText","document","getElementById","innerHTML","id","onChange","optionSelect","value","defaultValue","post","key","ups","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAuBeA,MApBf,WAAgB,IAAD,EACoBC,mBAAS,OAD7B,mBAOb,OAPa,UAQX,yBAAKC,UAAU,OACb,sCACA,uBAAGA,UAAU,QAAb,qJ,+BCRN,SAASC,EAAT,GAAgD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,KACrC,OACI,yBAAKL,UAAU,QACX,wBAAIA,UAAU,aAAaE,GAC3B,uBAAGF,UAAU,eAAb,UAA+BG,EAA/B,aACA,uBAAGH,UAAU,YAAYI,GACzB,uBAAGJ,UAAU,YAAW,uBAAGM,OAAO,SAASC,KAAMF,GAAzB,eAyDrBG,MAnDf,WAAgB,IAAD,EACmBT,mBAAS,OAD5B,mBACJU,EADI,KACMC,EADN,OAEcX,mBAAS,IAFvB,mBAEJY,EAFI,KAEEC,EAFF,KA2BX,OArBAC,qBACI,WACE,IAAMC,EAAM,4BAA8BL,EAAY,QACtDM,IAAMC,IAAIF,GACTG,MAAK,SAAAC,GACJ,IAAMC,EAAYD,EAAIE,KAAKA,KAAKC,SAASC,KAAI,SAAAC,GAAG,OAAIA,EAAIH,QAClDI,EAAcC,SAASC,eAAe,eAC5Cd,EAASO,GACTK,EAAYG,UAAW,QAEzB,CAAChB,IAYH,yBAAKX,UAAU,QAEX,4BAAQA,UAAU,SAAS4B,GAAG,eAAeC,SAXrD,WACI,IAAMC,EAAeL,SAASC,eAAe,gBAC7ChB,GAAU,SAAAD,GAAS,OAAIqB,EAAaC,SACpC,IAAMP,EAAcC,SAASC,eAAe,eAC/BD,SAASC,eAAe,QACrCF,EAAYG,UAAW,eAOf,4BAAQI,MAAM,MAAMC,cAAY,GAAhC,SACA,4BAAQD,MAAM,aAAd,eACA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,WAAd,aACA,4BAAQA,MAAM,UAAd,aAEJ,6BAAK,6BACL,uBAAGH,GAAG,eAAN,iBACA,wBAAIA,GAAG,OAAO5B,UAAU,YAEhBW,EAAMW,KAAI,SAAAW,GAAI,OACV,wBAAIjC,UAAU,KAAKkC,IAAKD,EAAKL,IAAI,kBAAC3B,EAAD,CAAMC,MAAO+B,EAAK/B,MAAOE,SAAU6B,EAAK7B,SAAUD,QAAS8B,EAAKE,IAAK9B,KAAM4B,EAAKnB,aC/CrHsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDqHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48e48465.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../css/App.css';\n\nfunction App() {\n  const [subreddit,setSubreddit] = useState('all')\n\n  // const select = document.getElementById('optionSelect').value\n  // console.log(select)\n\n\n  return (\n    <div className=\"App\">\n      <h1>readit</h1>\n      <p className='para'>\n      readit is a simple app written in React to help you read good posts from reddit.\n      You can select any other subreddit you want\n      to read from here.\n      </p>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React, {useState, useEffect} from 'react'\nimport '../css/list.css'\nimport '../css/card.css'\nimport axios from 'axios'\n\nfunction Card({title, upvotes, selftext, link}){\n    return(\n        <div className='card'>\n            <h1 className=\"cardTitle\">{title}</h1>\n            <p className=\"cardUpvotes\">{`${upvotes} upvotes`}</p>\n            <p className='cardText'>{selftext}</p>\n            <p className=\"cardLink\"><a target=\"_blank\" href={link}>Goto post</a></p>\n        </div>\n    )\n}\n\n\nfunction List(){\n    const [subreddit,selectSub] = useState('all')\n    const [posts,setPosts] = useState([])\n\n\n\n    useEffect(\n        ()=>{\n          const url = 'https://www.reddit.com/r/' + subreddit + '.json';\n          axios.get(url)\n          .then(res=>{\n            const newPosts =  res.data.data.children.map(obj => obj.data)\n            const loadingText = document.getElementById('loadingText')\n            setPosts(newPosts);\n            loadingText.innerHTML =''\n          })\n        },[posts]\n    )\n\n    function selectFunction(){\n        const optionSelect = document.getElementById('optionSelect')\n        selectSub(subreddit => optionSelect.value)\n        const loadingText = document.getElementById('loadingText')\n        const list = document.getElementById('list')\n        loadingText.innerHTML ='Loading...'\n    }\n    \n    return(\n        <div className='list'>\n\n            <select className='option' id='optionSelect' onChange={selectFunction}>  \n                <option value='all' defaultValue>r/all</option>\n                <option value='askreddit' >r/AskReddit</option>\n                <option value='javascript'>r/JavaScript</option>\n                <option value='reactjs'>r/reactjs</option>\n                <option value='webdev'>r/webdev</option>\n            </select>\n            <br/><br/>\n            <p id='loadingText'> Loading ... </p>\n            <ul id=\"list\" className='cardList'>\n                {\n                    posts.map(post => (\n                        <li className=\"li\" key={post.id}><Card title={post.title} selftext={post.selftext} upvotes={post.ups} link={post.url}/></li>\n                    ))\n                }\n            </ul>\n        \n        </div>\n    )\n}\n\nexport default List","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React , {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport List from './components/List'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <br/>\n    <List />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}